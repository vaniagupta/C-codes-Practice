
typedef struct {
    int top;
    int arr[100];
}Stack;

Stack* initialise(){
    Stack* st = (Stack*) malloc (sizeof(Stack));
    st->top = -1;
    return st;

}
bool isEmpty(Stack* st){
    return st->top == -1;
}

void push(Stack* st,int x){
    st->arr[++st->top] = x;
}

int pop(Stack* st){
    return st->arr[st->top--];
}

int peek(Stack* st){
    return st->arr[st->top];
}

typedef struct {
    Stack* st1;
    Stack* st2;

} MyQueue;


MyQueue* myQueueCreate() {
    
    MyQueue* qu = (MyQueue*) malloc(sizeof(MyQueue));
    qu->st1 = initialise();
    qu->st2 = initialise();
    return qu;
}

void myQueuePush(MyQueue* obj, int x) {
    push(obj->st1,x);
}

int myQueuePop(MyQueue* obj) {
    while(!isEmpty(obj->st1)){
        push(obj->st2,pop(obj->st1));
    }
    int x = pop(obj->st2);
    while(!isEmpty(obj->st2)){
        push(obj->st1,pop(obj->st2));
    }
    return x;
    
}

int myQueuePeek(MyQueue* obj) {
    while(!isEmpty(obj->st1)){
        push(obj->st2,pop(obj->st1));
    }
    int x = peek(obj->st2);
    while(!isEmpty(obj->st2)){
        push(obj->st1,pop(obj->st2));
    }
    return x;
}

bool myQueueEmpty(MyQueue* obj) {
    return isEmpty(obj->st1);
}

void myQueueFree(MyQueue* obj) {
    free(obj);
    
}

/**
 * Your MyQueue struct will be instantiated and called as such:
 * MyQueue* obj = myQueueCreate();
 * myQueuePush(obj, x);
 
 * int param_2 = myQueuePop(obj);
 
 * int param_3 = myQueuePeek(obj);
 
 * bool param_4 = myQueueEmpty(obj);
 
 * myQueueFree(obj);
*/