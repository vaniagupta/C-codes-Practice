typedef struct {
    int top;
    int* arr;
} Stack;
Stack* stackCreate(int size){
    Stack* stack = (Stack*) malloc(sizeof(Stack));
    stack->top = -1;
    stack->arr = (int *) malloc(size * sizeof(int));
    return stack;
}
bool isEmpty(Stack* st){
    return st->top == -1;
}
void push(Stack* st, int x){
    st->arr[++st->top] = x;
}

int pop(Stack* st){
    return st->arr[st->top--];
}
int peek(Stack* st){
    return st->arr[st->top];
}

int longestValidParentheses(char* s) {
    Stack* st = stackCreate(strlen(s)+1);
    push(st,-1);
    int max = 0;
    for(int i = 0; i < strlen(s); i++){
        char ch = s[i];
        if(ch == '('){
            push(st,i);
        }
        else{
            pop(st);
            if(isEmpty(st)){
                push(st,i);
            }
            else{
                if(i - peek(st) > max){
                    max = i - peek(st);
                }
            }
        }
    }
    return max;
    
}