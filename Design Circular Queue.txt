typedef struct {
    int* arr;
    int front;
    int rear;
    int capacity;
    
} MyCircularQueue;


MyCircularQueue* myCircularQueueCreate(int k) {
    MyCircularQueue* q = (MyCircularQueue *) malloc(sizeof(MyCircularQueue));
    q->front = -1;
    q->rear = -1;
    q->capacity = k;
    q->arr = (int *) malloc(k*sizeof(int));
    return q;
}

bool myCircularQueueEnQueue(MyCircularQueue* obj, int value) {
    //isEmpty
    if(obj->front == -1 ){
        obj->front = obj->rear = 0;
        obj->arr[obj->front] = value;
        return true;
    }
    //isfull
    else if( (obj->rear + 1) % obj->capacity == obj->front){
        return false;
    }
    else{
        obj->rear = (obj->rear + 1) % obj->capacity;
        obj->arr[obj->rear] = value;
        return true;
    }
    
}

bool myCircularQueueDeQueue(MyCircularQueue* obj) {
    //isEmpty
    if(obj->front == -1 ){
        return false;
    }
    //has only one element
    if(obj->front == obj->rear){
        obj->front = obj->rear = -1;
        return true;
    }
    else{
        obj->front = (obj->front + 1) % obj->capacity;
        return true;
    }
    
}

int myCircularQueueFront(MyCircularQueue* obj) {
    if(obj->front == -1 ){
        return -1;
    }
    else
    return obj->arr[obj->front];
    
}

int myCircularQueueRear(MyCircularQueue* obj) {
    if(obj->rear == -1 ){
        return -1;
    }
    else
    return obj->arr[obj->rear]; 
}

bool myCircularQueueIsEmpty(MyCircularQueue* obj) {
    if(obj->front == -1 && obj->rear == -1)
    return true;

    return false; 
}

bool myCircularQueueIsFull(MyCircularQueue* obj) {
    if( (obj->rear + 1) % obj->capacity == obj->front)
    return true;

    return false; 
}

void myCircularQueueFree(MyCircularQueue* obj) {
    free(obj);
}

/**
 * Your MyCircularQueue struct will be instantiated and called as such:
 * MyCircularQueue* obj = myCircularQueueCreate(k);
 * bool param_1 = myCircularQueueEnQueue(obj, value);
 
 * bool param_2 = myCircularQueueDeQueue(obj);
 
 * int param_3 = myCircularQueueFront(obj);
 
 * int param_4 = myCircularQueueRear(obj);
 
 * bool param_5 = myCircularQueueIsEmpty(obj);
 
 * bool param_6 = myCircularQueueIsFull(obj);
 
 * myCircularQueueFree(obj);
*/